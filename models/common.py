from typing import List, Literal
from pydantic import BaseModel, Field


class ServiceAssignment(BaseModel):
    staffId: str = Field(description="ID of the staff assigned")
    services: List[str] = Field(description="List of service IDs handled by the staff")

    class Config:
        json_schema_extra = {
            "example": {
                "staffId": "67be52e6953fc2c80fc2eb72",
                "services": ["67e08b5ff31b7f28ae9a9d77", "67e08b5ff31b7f28ae9a9d78"]
            }
        }


class SlotSubBlock(BaseModel):
    startTime: str = Field(description="Start time of the sub-slot must be in ISO8601 format")
    endTime: str = Field(description="End time of the sub-slot must be in ISO8601 format")
    staffServices: List[ServiceAssignment] = Field(description="Staff and their assigned services")

    class Config:
        json_schema_extra = {
            "example": {
                "startTime": "2025-06-01T09:00:00Z",
                "endTime": "2025-06-01T10:30:00Z",
                "staffServices": [
                    {
                        "staffId": "67be52e6953fc2c80fc2eb72",
                        "services": ["67e08b5ff31b7f28ae9a9d77"]
                    },
                    {
                        "staffId": "67be52e6953fc2c80fc2eb73",
                        "services": ["67e08b5ff31b7f28ae9a9d78"]
                    }
                ]
            }
        }


class RecurrenceState(BaseModel):
    type: Literal["daily", "weekly", "monthly"] = Field(description="The recurrence type")
    count: int = Field(default=1, description="Number of appointments generated by recurrence")
    interval: int = Field(default=1, description="Interval of recurrence")

    class Config:
        json_schema_extra = {
            "example": {
                "type": "weekly",
                "count": 4,
                "interval": 1
            }
        }
